// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ItemViewerFrame after page content is loaded 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ItemViewerFrame
    url="http://test.com"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <iframe
          className="itemviewer-iframe"
          id="itemviewer-iframe"
          onLoad={[Function]}
          onLoadStart={[Function]}
          src="http://test.com"
        />,
      ],
      "className": "itemViewerFrame",
      "tabIndex": 0,
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "itemviewer-iframe",
          "id": "itemviewer-iframe",
          "onLoad": [Function],
          "onLoadStart": [Function],
          "src": "http://test.com",
        },
        "ref": null,
        "rendered": null,
        "type": "iframe",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <iframe
            className="itemviewer-iframe"
            id="itemviewer-iframe"
            onLoad={[Function]}
            onLoadStart={[Function]}
            src="http://test.com"
          />,
        ],
        "className": "itemViewerFrame",
        "tabIndex": 0,
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "itemviewer-iframe",
            "id": "itemviewer-iframe",
            "onLoad": [Function],
            "onLoadStart": [Function],
            "src": "http://test.com",
          },
          "ref": null,
          "rendered": null,
          "type": "iframe",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`ItemViewerFrame matches snapshot while loading 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ItemViewerFrame
    url="http://test.com"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="itemviewer-iframe-spinner"
        >
          <img
            src="/images/spin-large.gif"
          />
        </div>,
        <iframe
          className="itemviewer-iframe"
          id="itemviewer-iframe"
          onLoad={[Function]}
          onLoadStart={[Function]}
          src="http://test.com"
        />,
      ],
      "className": "itemViewerFrame",
      "tabIndex": 0,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <img
            src="/images/spin-large.gif"
          />,
          "className": "itemviewer-iframe-spinner",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "src": "/images/spin-large.gif",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "itemviewer-iframe",
          "id": "itemviewer-iframe",
          "onLoad": [Function],
          "onLoadStart": [Function],
          "src": "http://test.com",
        },
        "ref": null,
        "rendered": null,
        "type": "iframe",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="itemviewer-iframe-spinner"
          >
            <img
              src="/images/spin-large.gif"
            />
          </div>,
          <iframe
            className="itemviewer-iframe"
            id="itemviewer-iframe"
            onLoad={[Function]}
            onLoadStart={[Function]}
            src="http://test.com"
          />,
        ],
        "className": "itemViewerFrame",
        "tabIndex": 0,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <img
              src="/images/spin-large.gif"
            />,
            "className": "itemviewer-iframe-spinner",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "src": "/images/spin-large.gif",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "itemviewer-iframe",
            "id": "itemviewer-iframe",
            "onLoad": [Function],
            "onLoadStart": [Function],
            "src": "http://test.com",
          },
          "ref": null,
          "rendered": null,
          "type": "iframe",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`ItemViewerFrame no item found 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ItemViewerFrame
    url=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <p>
        No Item Found
      </p>,
      "className": "no-item",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "No Item Found",
      },
      "ref": null,
      "rendered": "No Item Found",
      "type": "p",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <p>
          No Item Found
        </p>,
        "className": "no-item",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "No Item Found",
        },
        "ref": null,
        "rendered": "No Item Found",
        "type": "p",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
